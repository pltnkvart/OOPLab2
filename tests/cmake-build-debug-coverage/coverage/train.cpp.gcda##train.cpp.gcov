        -:    0:Source:/Users/plotnikovartem/CLionProjects/OOP/Lab2/train/train.cpp
        -:    0:Graph:/Users/plotnikovartem/CLionProjects/OOP/Lab2/tests/cmake-build-debug-coverage/CMakeFiles/Tests.dir/Users/plotnikovartem/CLionProjects/OOP/Lab2/train/train.cpp.gcno
        -:    0:Data:/Users/plotnikovartem/CLionProjects/OOP/Lab2/tests/cmake-build-debug-coverage/CMakeFiles/Tests.dir/Users/plotnikovartem/CLionProjects/OOP/Lab2/train/train.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "train.h"
        -:    2:
        -:    3:/*
        -:    4:почему >> не член класса
        -:    5:когда ошибка в вводе состояние класса меняться не должно
        -:    6:показать когда будет перемещение вместо копирования
        -:    7: */
        -:    8:
        -:    9:/**
        -:   10: * @brief Empty class constructor
        -:   11: */
function _ZN5TrainC2Ev called 9 returned 100% blocks executed 100%
function _ZN5TrainC1Ev called 9 returned 100% blocks executed 100%
       18:   12:Train::Train() : containers(nullptr), countContainers(0), maxWeight(0.0), maxVolume(0.0) {};
        9:   12-block  0
        9:   12-block  1
        -:   13:
        -:   14:/**
        -:   15: * @brief Class constructor with initialization of a given number containers from an array
        -:   16: * @param containersInit Array containers
        -:   17: * @param _volume Max volume for train
        -:   18: * @param _weight Max weight for train
        -:   19: * @param number Number of containers
        -:   20: */
function _ZN5TrainC2EiRA_9Containerdd called 7 returned 100% blocks executed 58%
function _ZN5TrainC1EiRA_9Containerdd called 7 returned 100% blocks executed 100%
       14:   21:Train::Train(int number, Container (&containersInit)[], double _weight, double _volume) {
        7:   22:    maxWeight = _weight;
        7:   23:    maxVolume = _volume;
        7:   24:    countContainers = 0;
       25:   25:    containers = new Container[number];
        7:   25-block  0
branch  0 taken 7
branch  1 taken 0
        7:   25-block  1
       25:   25-block  2
branch  2 taken 25
branch  3 taken 0
       25:   25-block  3
branch  4 taken 18
branch  5 taken 7
    $$$$$:   25-block  4
    $$$$$:   25-block  5
    $$$$$:   25-block  6
    $$$$$:   25-block  7
    $$$$$:   25-block  8
    $$$$$:   25-block  9
       32:   26:    for (int i = 0; i < number; i++) {
        7:   26-block  0
       32:   26-block  1
branch  0 taken 7
branch  1 taken 25
       25:   26-block  2
       25:   27:        this->operator+=(containersInit[i]);
       25:   27-block  0
branch  0 taken 25
branch  1 taken 0
    $$$$$:   27-block  1
       25:   28:    }
       25:   28-block  0
       14:   29:};
        7:   29-block  0
        7:   29-block  1
        -:   30:
        -:   31:/**
        -:   32: * @brief Class constructor with initialization by one container
        -:   33: * @param oneContainer One container
        -:   34: * @param _weight Max weight for train
        -:   35: * @param _volume Max volume for train
        -:   36: */
function _ZN5TrainC2ER9Containerdd called 1 returned 100% blocks executed 40%
function _ZN5TrainC1ER9Containerdd called 1 returned 100% blocks executed 100%
        2:   37:Train::Train(Container &oneContainer, double _weight, double _volume) {
        1:   38:    containers = new Container[1];
        1:   38-block  0
        1:   38-block  1
branch  0 taken 1
branch  1 taken 0
        1:   38-block  2
branch  2 taken 0
branch  3 taken 1
    $$$$$:   38-block  3
    $$$$$:   38-block  4
    $$$$$:   38-block  5
    $$$$$:   38-block  6
    $$$$$:   38-block  7
    $$$$$:   38-block  8
        1:   39:    containers[0] = oneContainer;
        1:   40:    maxWeight = _weight;
        1:   41:    maxVolume = _volume;
        1:   42:    countContainers = 1;
        2:   43:};
        1:   43-block  0
        1:   43-block  1
        -:   44:
        -:   45:/**
        -:   46: * @brief Copy constructor
        -:   47: * @param tr Element to be copied
        -:   48: */
function _ZN5TrainC2ERKS_ called 1 returned 100% blocks executed 18%
function _ZN5TrainC1ERKS_ called 1 returned 100% blocks executed 100%
        2:   49:Train::Train(const Train &tr) : countContainers(tr.countContainers), maxVolume(tr.maxVolume), maxWeight(tr.maxWeight) {
        1:   50:    containers = new Container[countContainers];
        1:   50-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:   50-block  1
    $$$$$:   50-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:   50-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:   50-block  4
    $$$$$:   50-block  5
    $$$$$:   50-block  6
    $$$$$:   50-block  7
    $$$$$:   50-block  8
    $$$$$:   50-block  9
        1:   51:    std::copy(tr.containers, tr.containers + tr.countContainers, containers);
        2:   52:}
        1:   52-block  0
        1:   52-block  1
        -:   53:
        -:   54:/**
        -:   55: * @brief Moving constructor
        -:   56: * @param tr Element to be moved
        -:   57: */
function _ZN5TrainC2EOS_ called 0 returned 0% blocks executed 0%
function _ZN5TrainC1EOS_ called 0 returned 0% blocks executed 0%
    #####:   58:Train::Train(Train &&tr) noexcept: countContainers(tr.countContainers), maxWeight(tr.maxWeight),
    #####:   59:                                   maxVolume(tr.maxVolume) {
    #####:   60:    tr.containers = nullptr;
    #####:   61:}
    $$$$$:   61-block  0
    $$$$$:   61-block  1
        -:   62:
        -:   63:/**
        -:   64: * @brief Overload input function
        -:   65: * @param is Stream into which data is entered
        -:   66: * @param train Writable structure
        -:   67: * @return Stream
        -:   68: */
function _ZrsRNSt3__113basic_istreamIcNS_11char_traitsIcEEEER5Train called 1 returned 100% blocks executed 58%
        1:   69:std::istream &operator>>(std::istream &is, Train &train) {
        -:   70:    double maxWeight, maxVolume;
        -:   71:    int countContainers;
        -:   72:
        1:   73:    is >> maxWeight >> maxVolume >> countContainers;
        -:   74:
        1:   75:    if (is.fail()) {
        1:   75-block  0
branch  0 taken 0
branch  1 taken 1
    #####:   76:        is.setstate(std::ios::failbit);
    #####:   77:        return is;
    $$$$$:   77-block  0
        -:   78:    }
        -:   79:
        1:   80:    train.setMaxWeight(maxWeight);
        1:   81:    train.setMaxVolume(maxVolume);
        2:   82:    train.containers = new Container[countContainers];
        1:   82-block  0
branch  0 taken 1
branch  1 taken 0
        1:   82-block  1
        2:   82-block  2
branch  2 taken 2
branch  3 taken 0
        2:   82-block  3
branch  4 taken 1
branch  5 taken 1
    $$$$$:   82-block  4
    $$$$$:   82-block  5
    $$$$$:   82-block  6
    $$$$$:   82-block  7
    $$$$$:   82-block  8
    $$$$$:   82-block  9
        3:   83:    for (int i = 0; i < countContainers; i++) {
        1:   83-block  0
        3:   83-block  1
branch  0 taken 2
branch  1 taken 1
        2:   83-block  2
        2:   84:        Container container;
        2:   85:        is >> container;
        2:   85-block  0
branch  0 taken 2
branch  1 taken 0
        2:   86:        train += container;
        2:   86-block  0
branch  0 taken 2
branch  1 taken 0
        2:   86-block  1
branch  2 taken 2
branch  3 taken 0
    $$$$$:   86-block  2
        2:   87:    }
        2:   87-block  0
    $$$$$:   87-block  1
        1:   88:    train.setCountContainers(countContainers);
        1:   89:    return is;
        1:   89-block  0
        1:   90:}
    $$$$$:   90-block  0
        1:   90-block  1
        -:   91:
        -:   92:
        -:   93:/**
        -:   94: * @brief Overload output function
        -:   95: * @param s Stream from which data is entered
        -:   96: * @param train Readable structure
        -:   97: * @return Stream
        -:   98: */
function _ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERK5Train called 1 returned 100% blocks executed 100%
        1:   99:std::ostream &operator<<(std::ostream &s, const Train &train) {
        1:  100:    s << "Max Weight - " << train.getMaxWeight() << "; Max Volume - " << train.getMaxVolume() << "; Containers - "
        1:  101:      << train.getCount() << std::endl;
        3:  102:    for (int i = 0; i < train.getCount(); i++) {
        1:  102-block  0
        3:  102-block  1
branch  0 taken 2
branch  1 taken 1
        2:  102-block  2
        2:  103:        s << train.getContainers()[i];
        2:  104:    }
        2:  104-block  0
        1:  105:    s << std::endl;
        1:  106:    return s;
        1:  106-block  0
        -:  107:}
        -:  108:
        -:  109:/**
        -:  110: * @brief Adding new container
        -:  111: * @param newContainer Exemplar new container
        -:  112: * @throw std::runtime_error Capacity or volume limitation
        -:  113: * @return Self pointer
        -:  114: */
function _ZN5TrainpLE9Container called 35 returned 100% blocks executed 64%
       35:  115:Train &Train::operator+=(Container newContainer) {
       35:  116:    if (countMass() + newContainer.getMass() <= maxWeight && newContainer.getVolume() <= maxVolume) {
       35:  116-block  0
branch  0 taken 34
branch  1 taken 1
       34:  116-block  1
    $$$$$:  116-block  2
       34:  116-block  3
       89:  117:        Container *tmp = new Container[countContainers + 1];
       34:  117-block  0
branch  0 taken 0
branch  1 taken 34
       34:  117-block  1
       89:  117-block  2
branch  2 taken 89
branch  3 taken 0
       89:  117-block  3
branch  4 taken 55
branch  5 taken 34
    $$$$$:  117-block  4
    $$$$$:  117-block  5
    $$$$$:  117-block  6
    $$$$$:  117-block  7
    $$$$$:  117-block  8
    $$$$$:  117-block  9
       89:  118:        for (int i = 0; i < countContainers; i++) {
       34:  118-block  0
       89:  118-block  1
branch  0 taken 34
branch  1 taken 55
       55:  118-block  2
       55:  119:            tmp[i] = containers[i];
       55:  120:        }
       55:  120-block  0
        -:  121:
       34:  122:        tmp[countContainers] = std::move(newContainer); //перемещающий (если не стд мув то копирующий)
       34:  123:        countContainers++;
       34:  124:        delete[] containers;
       34:  124-block  0
branch  0 taken 2
branch  1 taken 32
       32:  124-block  1
    $$$$$:  124-block  2
       32:  124-block  3
    $$$$$:  124-block  4
       32:  124-block  5
       34:  125:        containers = tmp;
       34:  126:        return *this;
       34:  126-block  0
        -:  127:    } else {
        1:  128:        throw std::runtime_error("Capacity or volume limitation");
        1:  128-block  0
branch  0 taken 1
branch  1 taken 0
        1:  128-block  1
    $$$$$:  128-block  2
        -:  129:    }
    #####:  130:}
        -:  131:
        -:  132:
        -:  133:/**
        -:  134: * @brief Getting a container by its index
        -:  135: * @param index Index of container to be received
        -:  136: * @throw std::out_of_range Index of container to be received out of range
        -:  137: * @return Reference to the container
        -:  138: */
function _ZN5TrainixEi called 14 returned 100% blocks executed 33%
       14:  139:Container &Train::operator[](int index) {
       14:  140:    if (index < countContainers) {
       14:  140-block  0
branch  0 taken 14
branch  1 taken 0
       14:  141:        return containers[index];
       14:  141-block  0
        -:  142:    } else {
    #####:  143:        throw std::out_of_range("Index out of range");
    $$$$$:  143-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  143-block  1
    $$$$$:  143-block  2
    $$$$$:  143-block  3
        -:  144:    }
    #####:  145:}
        -:  146:
        -:  147:/**
        -:  148: * @brief Deleting container by its index
        -:  149: * @param index Index of container to be deleted
        -:  150: * @throw std::out_of_range Index of container to be deleted out of range
        -:  151: */
function _ZN5Train15deleteContainerEi called 3 returned 100% blocks executed 63%
        3:  152:void Train::deleteContainer(int index) {
        3:  153:    if (index < countContainers) {
        3:  153-block  0
branch  0 taken 3
branch  1 taken 0
        8:  154:        for (int i = index; i < countContainers - 1; ++i) {
        3:  154-block  0
        8:  154-block  1
branch  0 taken 3
branch  1 taken 5
        5:  154-block  2
        5:  155:            containers[i] = containers[i + 1];
        5:  156:        }
        5:  156-block  0
        3:  157:        countContainers--;
        3:  158:    } else {
        3:  158-block  0
    #####:  159:        throw std::out_of_range("Index out of range");
    $$$$$:  159-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  159-block  1
    $$$$$:  159-block  2
    $$$$$:  159-block  3
        -:  160:    }
        3:  161:}
        3:  161-block  0
        -:  162:
        -:  163:/**
        -:  164: * @brief Total mass calculation
        -:  165: * @return Total mass
        -:  166: */
function _ZN5Train9countMassEv called 37 returned 100% blocks executed 100%
       37:  167:double Train::countMass() {
       37:  168:    double totalMass = 0.0;
       37:  169:    if (countContainers != 0 || containers != nullptr) {
       37:  169-block  0
branch  0 taken 10
branch  1 taken 27
       10:  169-block  1
branch  2 taken 2
branch  3 taken 8
        2:  169-block  2
       99:  170:        for (int i = 0; i < countContainers; i++) {
       35:  170-block  0
       99:  170-block  1
branch  0 taken 64
branch  1 taken 35
       64:  170-block  2
       64:  171:            totalMass += containers[i].getMass();
       64:  172:        }
       64:  172-block  0
       35:  173:    }
       35:  173-block  0
       37:  174:    return totalMass;
       37:  174-block  0
        -:  175:}
        -:  176:
        -:  177:/**
        -:  178: * @brief Calculating the center of mass of a train, measured in containers
        -:  179: * @return Center of mass of a train
        -:  180: */
function _ZN5Train15countCenterMassEv called 1 returned 100% blocks executed 87%
        1:  181:double Train::countCenterMass() {
        1:  182:    if (countContainers != 0) {
        1:  182-block  0
branch  0 taken 0
branch  1 taken 1
        1:  183:        double totalMass = countMass();
        1:  184:        double massMoment = 0.0;
        3:  185:        for (int i = 1; i <= countContainers; ++i) {
        1:  185-block  0
        3:  185-block  1
branch  0 taken 2
branch  1 taken 1
        2:  185-block  2
        2:  186:            massMoment += containers[i].getMass() * i;
        2:  187:        }
        2:  187-block  0
        1:  188:        return massMoment / totalMass;
        1:  188-block  0
        -:  189:    }
    #####:  190:    return 0.0;
    $$$$$:  190-block  0
        1:  191:}
        1:  191-block  0
        -:  192:
        -:  193:/**
        -:  194: * @brief Minimizing the number of containers function by reloading cargo between them and removing empty containers
        -:  195: */
function _ZN5Train13minContainersEv called 1 returned 100% blocks executed 100%
        1:  196:void Train::minContainers() {
        1:  197:    int i = 0;
        5:  198:    while (i < countContainers) {
        1:  198-block  0
        5:  198-block  1
branch  0 taken 4
branch  1 taken 1
        4:  198-block  2
        4:  199:        if (containers[i].getCategory() == EMPTY) {
        4:  199-block  0
branch  0 taken 2
branch  1 taken 2
        2:  200:            deleteContainer(i);
        2:  201:        } else {
        2:  201-block  0
        2:  202:            i++;
        2:  202-block  0
        -:  203:        }
        -:  204:    }
        1:  205:    i = 0;
        2:  206:    while (i < countContainers - 1) {
        1:  206-block  0
        2:  206-block  1
branch  0 taken 1
branch  1 taken 1
        1:  206-block  2
        1:  207:        int j = i + 1;
        2:  208:        while (j < countContainers) {
        1:  208-block  0
        2:  208-block  1
branch  0 taken 1
branch  1 taken 1
        1:  208-block  2
        1:  209:            double remainingSpace = containers[j].getVolume() - containers[i].getVolume();
        1:  210:            if (remainingSpace > 0.0) {
        1:  210-block  0
branch  0 taken 0
branch  1 taken 1
        1:  211:                double availableCargo = containers[i].getMass();
        1:  212:                if (availableCargo > 0.0) {
        1:  212-block  0
branch  0 taken 0
branch  1 taken 1
        1:  213:                    containers[i].transferCargo(availableCargo, containers[j]);
        1:  214:                }
        1:  214-block  0
        1:  215:            }
        1:  215-block  0
        1:  216:            j++;
        -:  217:        }
        1:  218:        i++;
        -:  219:    }
        1:  220:}
        1:  220-block  0
        -:  221:
        -:  222:
        -:  223:/**
        -:  224: * @brief Ensuring the safety of transportation of dangerous goods function
        -:  225: */
function _ZN5Train16ensuringSecurityEv called 1 returned 100% blocks executed 80%
        1:  226:void Train::ensuringSecurity() {
        1:  227:    int i = 0;
        6:  228:    while (i < countContainers) {
        1:  228-block  0
        6:  228-block  1
branch  0 taken 5
branch  1 taken 1
        5:  228-block  2
        5:  229:        if (containers[i].getCategory() == DANGEROUS) {
        5:  229-block  0
branch  0 taken 3
branch  1 taken 2
        2:  230:            int j = i - 2;
        3:  231:            while (j < i + 3) {
        2:  231-block  0
        3:  231-block  1
branch  0 taken 0
branch  1 taken 3
        1:  231-block  2
        3:  232:                if (j >= 0 && j < countContainers && containers[j].getCategory() != DANGEROUS) {
        3:  232-block  0
branch  0 taken 2
branch  1 taken 1
        2:  232-block  1
branch  2 taken 0
branch  3 taken 2
        2:  232-block  2
        2:  232-block  3
branch  4 taken 0
branch  5 taken 2
        2:  232-block  4
        3:  233:                    for (int k = i - 1; k > j; --k) {
        2:  233-block  0
        3:  233-block  1
branch  0 taken 1
branch  1 taken 2
        1:  233-block  2
        1:  234:                        Container temp = containers[k];
        1:  235:                        containers[k] = containers[k + 1];
        1:  235-block  0
branch  0 taken 1
branch  1 taken 0
        1:  236:                        containers[k + 1] = temp;
        1:  236-block  0
branch  0 taken 1
branch  1 taken 0
        1:  237:                    }
        1:  237-block  0
    $$$$$:  237-block  1
    $$$$$:  237-block  2
        2:  238:                    Container newCont("Empty Container", 0.0, 0.0, EMPTY);
        2:  238-block  0
branch  0 taken 2
branch  1 taken 0
    $$$$$:  238-block  1
        2:  239:                    operator+=(newCont);
        2:  239-block  0
branch  0 taken 2
branch  1 taken 0
        2:  239-block  1
branch  2 taken 2
branch  3 taken 0
    $$$$$:  239-block  2
        2:  240:                    i++;
        -:  241:                    break;
        2:  242:                }
        2:  242-block  0
    $$$$$:  242-block  1
        1:  243:                j++;
        -:  244:            }
        2:  245:        }
        2:  245-block  0
        5:  246:        i++;
        -:  247:    }
        1:  248:}
    $$$$$:  248-block  0
        1:  248-block  1
        -:  249:
        -:  250:
        -:  251:/**
        -:  252: * @brief Copy assignment operator
        -:  253: */
function _ZN5TrainaSERKS_ called 1 returned 100% blocks executed 52%
        1:  254:Train &Train::operator=(const Train &tr) {
        1:  255:    if (this != &tr) {
        1:  255-block  0
branch  0 taken 0
branch  1 taken 1
        1:  256:        delete[] containers;
        1:  256-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:  256-block  1
    $$$$$:  256-block  2
    $$$$$:  256-block  3
    $$$$$:  256-block  4
    $$$$$:  256-block  5
        5:  257:        containers = new Container[tr.countContainers];
        1:  257-block  0
branch  0 taken 1
branch  1 taken 0
        1:  257-block  1
        5:  257-block  2
branch  2 taken 5
branch  3 taken 0
        5:  257-block  3
branch  4 taken 4
branch  5 taken 1
    $$$$$:  257-block  4
    $$$$$:  257-block  5
    $$$$$:  257-block  6
    $$$$$:  257-block  7
    $$$$$:  257-block  8
    $$$$$:  257-block  9
        1:  258:        maxVolume = tr.maxVolume;
        1:  259:        maxWeight = tr.maxWeight;
        1:  260:        countContainers = tr.countContainers;
        6:  261:        for (int i = 0; i < countContainers; i++) {
        1:  261-block  0
        6:  261-block  1
branch  0 taken 5
branch  1 taken 1
        5:  261-block  2
        5:  262:            containers[i] = tr.containers[i];
        5:  263:        }
        5:  263-block  0
        1:  264:    }
        1:  264-block  0
        1:  265:    return *this;
        1:  265-block  0
    #####:  266:}
        -:  267:
        -:  268:
        -:  269:/**
        -:  270: * @brief Moving assignment operator
        -:  271: */
function _ZN5TrainaSEOS_ called 1 returned 100% blocks executed 100%
        1:  272:Train &Train::operator=(Train &&st) noexcept {
        1:  273:    std::swap(maxWeight, st.maxWeight);
        1:  274:    std::swap(maxVolume, st.maxVolume);
        1:  275:    std::swap(countContainers, st.countContainers);
        1:  276:    std::swap(containers, st.containers);
        1:  277:    return *this;
        1:  277-block  0
        -:  278:}
